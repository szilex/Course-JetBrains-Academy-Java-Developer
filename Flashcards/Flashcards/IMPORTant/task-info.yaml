type: edu
custom_name: stage7
files:
- name: test/common/DialogClue.kt
  visible: false
  text: |
    package common

    import org.hyperskill.hstest.testcase.CheckResult
    import org.hyperskill.hstest.testcase.TestCase


    // ---- DialogClue ----

    /** May be several lines or just one. */
    interface Phrase {
        fun toPhraseLines(): List<PhraseLine>
    }

    /** list of input and output lines, combined together. */
    fun compositePhrase(block: () -> List<Phrase>) = object : Phrase {
        override fun toPhraseLines() = block().flatMap { it.toPhraseLines() }
    }

    fun compositePhrase(vararg phrases: Phrase) = object : Phrase {
        override fun toPhraseLines() = phrases.flatMap { it.toPhraseLines() }
    }

    /** Either user (input) or output phrase. Each phrase should be a line. */
    sealed class PhraseLine : Phrase {
        override fun toPhraseLines() = listOf(this)
    }

    /** Some mutable data, that is passed across dialog phrases. */
    class Context {
        val rawData = mutableMapOf<String, Any>()
    }

    class UserLine(val text: String, val updateContext: CtxUpdate = {}) : PhraseLine() {

    }
    typealias CtxUpdate = (ctx: Context) -> Unit

    class OutputLine(val checker: (text: String, ctx: Context) -> CheckResult) : PhraseLine()

    /** This function creates a line with user input (our test input).
     *
     * Unfortunately we can't access the Context, when we adding user text.
     * This occurs because of HS test framework limitations:
     * we need to pass all inputs first, and then start checking outputs. */
    fun user(text: String, updateContext: (ctx: Context) -> Unit = {}) = UserLine(text, updateContext)

    fun anyLine(updateContext: CtxUpdate = {}) = OutputLine { _, ctx -> CheckResult.correct().also { updateContext(ctx) } }

    fun containing(
            vararg parts: String,
            ignoreCase: Boolean = true,
            hint: String? = null,
            updateContext: CtxUpdate = {}
    ) = OutputLine { line, context ->
        fun buildFeedback(): String {
            val feedback = StringBuilder()
            feedback.append("Your line\n`$line`\nshould contain ${parts.joinToString("`, `", "`", "`")}")
            if (ignoreCase) {
                feedback.append(" (ignoring case)")
            }
            feedback.append(".")
            if (hint != null) {
                feedback.append("\n$hint")
            }
            return feedback.toString()
        }

        var startIndex = 0
        for (part in parts) {
            startIndex = line.indexOf(part, startIndex, ignoreCase)
            if (startIndex == -1) {
                return@OutputLine CheckResult.wrong(buildFeedback())
            }
        }
        updateContext(context) // everything is correct, update context
        CheckResult.correct();
    }

    class DialogClue(private val phrases: List<PhraseLine>) {

        private val inputPhrases = phrases.filter { it is UserLine }.map { it as UserLine }
        private val outputPhrases = phrases.filter { it is OutputLine }.map { it as OutputLine }

        fun generateInput() = inputPhrases
                .joinToString("\n", postfix = "\n") { it.text }

        fun checkOutput(output: String): CheckResult {
            val lines = output.lines()
                    .filter { it.isNotBlank() }

            fun wrongOutputSizeFeedback() = CheckResult.wrong("The number of lines in your output is ${lines.size}, " +
                    "but it should be ${outputPhrases.size}. " +
                    "Check, that you output your lines with println, not print. And there are no extra outputs.")

    // here we store some mutable data from phrase to phrase
            val context = Context()

            val lineIter = lines.listIterator()
            phrases.forEach { phraseLine ->
                when (phraseLine) {
                    is UserLine -> phraseLine.updateContext(context)
                    is OutputLine -> {
                        if (!lineIter.hasNext()) {
                            return wrongOutputSizeFeedback()
                        }
                        val result = phraseLine.checker(lineIter.next(), context)
                        if (!result.isCorrect) {
                            return CheckResult.wrong(result.feedback)
                        }
                    }
                }
            }

            if (lineIter.hasNext()) {
                return wrongOutputSizeFeedback()
            }

            return CheckResult.correct();
        }
    }

    fun dialogTest(vararg phrases: Phrase, consoleArgs: Array<String> = emptyArray()): TestCase<DialogClue> {
        val dialogClue = DialogClue(phrases.flatMap { it.toPhraseLines() })
        return TestCase<DialogClue>()
                .setInput(dialogClue.generateInput())
                .setAttach(dialogClue)
                .addArguments(*consoleArgs)
    }
  learner_created: false
- name: test/common/FlashcardsStage7Test.kt
  visible: false
  text: |
    package common

    import org.hyperskill.hstest.stage.StageTest
    import org.hyperskill.hstest.testcase.CheckResult
    import org.hyperskill.hstest.testcase.TestCase
    import flashcards.Main
    import java.io.File


    abstract class FlashcardsStage7Test : StageTest<DialogClue>(Main::class.java) {

        override fun generate(): List<TestCase<DialogClue>> {
            File("capitals.txt").delete()
            File("capitalsNew.txt").delete()
            val tests = mutableListOf<TestCase<DialogClue>>()

            val capitalList = mutableListOf<Pair<String, String>>()
            fun capitals() = capitalList.toTypedArray()

            // wrappers for add/remove card, but saving cards to capitalList:
            fun addCapital(card: String, def: String) = addCard(card, def)
                    .also { capitalList += card to def }

            fun removeCapital(card: String) = removeCard(card)
                    .also { capitalList.removeIf { it.first == card } }

            // clear files
            tests += dialogTest(
                    exportCards("capitals.txt", 0),
                    exportCards("capitalsNew.txt", 0),
                    exit()
            )
            tests += dialogTest(
                    addCapital("France", "Paris"),
                    addCapital("Russia", "Moscow"),
                    askCards("France", "??", ""),
                    exit(),
                    exportArg(2),
                    consoleArgs = arrayOf("-export", "capitals.txt")
            )
            tests += dialogTest(
                    importArg(2, *capitals()),
                    addCapital("Japan", "Tokyo"),
                    askCards("Moscow", "Paris", "Tokyo"),
                    exit(),
                    exportArg(3),
                    consoleArgs = arrayOf("-import", "capitals.txt", "-export", "capitalsNew.txt")
            )
            tests += dialogTest(
                    importArg(3, *capitals()),
                    askCards("Moscow", "Paris", "Tokyo"),
                    removeCapital("Japan"),
                    exit(),
                    exportArg(2),
                    consoleArgs = arrayOf("-export", "capitals.txt", "-import", "capitalsNew.txt")
            )
            tests += dialogTest(
                    importArg(2, *capitals()),
                    exit(),
                    consoleArgs = arrayOf("-import", "capitals.txt")
            )

            return tests
        }

        override fun check(reply: String, clue: DialogClue): CheckResult {
            return clue.checkOutput(reply)
        }


        // ------ extensions for building a dialog: ------

        fun importArg(count: Int, vararg cards: Pair<String, String>) =
                containing("$count cards have been loaded",
                        updateContext = { ctx ->
                            cards.forEach { (card, def) ->
                                ctx.addCard(card, def)
                                ctx.wrongCards.removeAll(listOf(card))
                            }
                        })

        fun exportArg(count: Int) = containing("$count cards have been saved")


        fun inputAction(action: String) = compositePhrase {
            listOf(containing("action", hint = "This line should ask the action."), user(action))
        }

        inner class LogPhrase(val fileName: String) : Phrase {
            override fun toPhraseLines() = compositePhrase(
                    inputAction("log"),
                    anyLine(),
                    user(fileName),
                    OutputLine { text, ctx ->
                        val result = containing("saved", hint = "This line should indicate, that the log has been saved.").checker(text, ctx)
                        if (!result.isCorrect) {
                            return@OutputLine result
                        }
                        if (!File(fileName).exists()) {
                            return@OutputLine CheckResult.wrong("The log file $fileName does not exist.")
                        }
                        CheckResult.correct();
                    }
            ).toPhraseLines()
        }

        private fun log(fileName: String) = LogPhrase(fileName)

        private fun resetStats() = compositePhrase(
                inputAction("reset stats"), containing("reset", hint = "This line should confirm card statistics reset.",
                updateContext = { ctx -> ctx.wrongCards.clear() })
        )

        /** Between tests we cache wrong answered capitals to check hardest cards, when we restore them from file. */
        private val wrongAnweredCapitals: MutableList<String> = mutableListOf()

        /** [customWrongCards] are used to load saved wrong cards from the previous test. */
        fun hardestCards(customWrongCards: List<String>? = null) = compositePhrase(
                inputAction("hardest card"),
                OutputLine { text, ctx ->
                    if (customWrongCards != null) {
                        ctx.wrongCards.clear()
                        ctx.wrongCards.addAll(customWrongCards)
                    }
                    val groupedCards = ctx.wrongCards
                            .groupBy { it }.mapValues { (_, v) -> v.size }
                    val maxMistakes = groupedCards.values.max() ?: 0
                    val hardestCards = groupedCards.filterValues { it == maxMistakes }.keys.toList()

                    when (hardestCards.size) {
                        0 -> return@OutputLine containing("There are no cards with errors").checker(text, ctx)
                        1 -> return@OutputLine containing("The hardest card is \"${hardestCards[0]}\"",
                                "$maxMistakes").checker(text, ctx)
                        else -> {
                            hardestCards.forEach { card ->
                                if (card !in text) {
                                    return@OutputLine CheckResult.wrong("Your line `$text`\n" +
                                            "should contain the hardest cards " +
                                            "${hardestCards.joinToString("\", \"", "\"", "\"")} with $maxMistakes mistakes.")
                                }
                            }
                            val numberOfHardestCards = text.count { it == '"' }
                            if (numberOfHardestCards != hardestCards.size * 2) {
                                return@OutputLine CheckResult.wrong("Your line `$text`\n" +
                                        "contains more hardest cards, than expected. Expected: $hardestCards.")
                            }
                            if (maxMistakes.toString() !in text) {
                                if (numberOfHardestCards != hardestCards.size) {
                                    return@OutputLine CheckResult.wrong("Your line `$text`\n" +
                                            "should contain $maxMistakes mistakes for your hardest cards.")
                                }
                            }
                        }
                    }
                    CheckResult.correct();
                }
        )


        // extend dialog context with our own data:

        @Suppress("UNCHECKED_CAST")
        private val Context.cardToDef
            get() = rawData.getOrPut("cardToDef") { mutableMapOf<String, String>() } as MutableMap<String, String>

        @Suppress("UNCHECKED_CAST")
        /** All cards, that were answered wrong. */
        private val Context.wrongCards
            get() = rawData.getOrPut("wrongCards") { mutableListOf<String>() } as MutableList<String>


        @Suppress("UNCHECKED_CAST")
        private val Context.defToCard
            get() = rawData.getOrPut("defToCard") { mutableMapOf<String, String>() } as MutableMap<String, String>

        private fun Context.addCard(card: String, definition: String) {
            cardToDef[card] = definition
            defToCard[definition] = card
        }

        private fun Context.removeCard(card: String) {
            val def = cardToDef.remove(card)
            if (def != null) {
                defToCard.remove(def)
            }
        }


        private fun addCard(card: String, def: String) = compositePhrase(
                inputAction("add"),
                anyLine(), user(card),
                anyLine(), user(def),
                containing("has been added",
                        hint = "This line should add the pair (\"$card\":\"$def\").",
                        updateContext = { ctx -> ctx.addCard(card, def) })
        )


        private fun existingDef(card: String, def: String) = compositePhrase(
                inputAction("add"),
                anyLine(), user(card),
                anyLine(), user(def),
                containing("definition", "exists", hint = "This line should reject the existing definition `$def`.")
        )


        private fun existingCard(card: String) = compositePhrase(
                inputAction("add"),
                anyLine(), user(card),
                containing("card", "exists", hint = "This line should reject the existing card `$card`.")
        )

        private fun removeCard(card: String) = compositePhrase(
                inputAction("remove"),
                anyLine(), user(card),
                containing("has been removed", hint = "This line should remove the card `$card`.",
                        updateContext = { ctx -> ctx.removeCard(card) })
        )

        private fun removeNonExisting(card: String) = compositePhrase(
                inputAction("remove"),
                anyLine(), user(card),
                containing("Can't remove \"$card\"", hint = "This line should reject removing non existing card `$card`.")
        )


        private fun importCards(fileName: String, vararg cards: Pair<String, String>) = compositePhrase(
                inputAction("import"),
                anyLine(), user(fileName),
                containing("${cards.size} cards have been loaded",
                        updateContext = { ctx ->
                            val cardToDef = ctx.cardToDef
                            val defToCard = ctx.defToCard
                            cards.forEach { (card, def) ->
                                if (card in cardToDef) {
                                    defToCard.remove(cardToDef[card]) // erase wrong reverse link
                                }
                                ctx.addCard(card, def) // with update!!
                            }
                        })
        )

        private fun importNonExisting(fileName: String) = compositePhrase(
                inputAction("import"),
                anyLine(), user(fileName),
                containing("not found", hint = "This line should say, that the file $fileName does not exist.")
        )

        private fun exportCards(fileName: String, cardsSize: Int) = compositePhrase(
                inputAction("export"),
                anyLine(), user(fileName),
                containing("$cardsSize cards have been saved")
        )

        private fun exit() = compositePhrase(
                inputAction("exit"),
                anyLine()
        )

        /** Perform ask action. [ansDefs] are our test answers with definitions.
         * We don't know are they wrong or correct, because the test is random. */
        private fun askCards(vararg ansDefs: String, saveWrongAnsweredCapitals: Boolean = false) = compositePhrase {
            val startPhrases = listOf(
                    inputAction("ask"),
                    anyLine(), user(ansDefs.size.toString())
            )
            // here we add the dialog logic, by creating base OutputLine class with a custom checker
            // we use context to connect with neighbor checkers

            // iterate test answered definitions:
            val repeatingPhrases = ansDefs.map { ansDef ->
                compositePhrase(
                        OutputLine { text, ctx ->
                            val askedCard = text.dropWhile { it != '"' }.dropLastWhile { it != '"' }.trim('"')
                            if (askedCard.isEmpty()) {
                                return@OutputLine CheckResult.wrong("Not found card in quotes. " +
                                        "This line should ask the definition of a random card.")
                            }
                            if (askedCard !in ctx.cardToDef) {
                                return@OutputLine CheckResult.wrong("You asked the definition of the non existing card: `$askedCard`.")
                            }
                            ctx.rawData["lastAskedCard"] = askedCard
                            CheckResult.correct();
                        },
                        // unfortunately we can't access the Context in user action, see documentation of user()
                        user(ansDef),
                        // check the answer:
                        OutputLine { text, ctx ->
                            val askedCard = ctx.rawData["lastAskedCard"]?.toString()
                                    ?: throw IllegalStateException("Not found lastAskedCard in the `ask` checker.")
                            val cardToDef = ctx.cardToDef
                            val defToCard = ctx.defToCard
                            val rightAns = cardToDef[askedCard]

                            val hint = "The asked card was `$askedCard`, the answer was `$ansDef`."
                            if (cardToDef[askedCard] == ansDef)
                                containing("Correct answer", hint = hint).checker(text, ctx)
                            else {
                                ctx.wrongCards += askedCard

                                val isDefFor = defToCard[ansDef]
                                if (isDefFor != null) {
                                    containing("Wrong answer", "The correct one is \"$rightAns\"",
                                            "you've just written the definition of \"$isDefFor\"", hint = hint).checker(text, ctx)
                                } else {
                                    // should not contain definition hint!!
                                    if (text.contains("you've just written the definition of")) {
                                        CheckResult.wrong("Your line\n`$text`\nshould NOT contain " +
                                                "`you've just written the definition of`.\n$hint")
                                    } else {
                                        containing("Wrong answer", "The correct one is \"$rightAns\"", hint = hint).checker(text, ctx)
                                    }

                                }
                            }.also {
                                // only for these tests. To test restoring wrong capitals from file.
                                if (saveWrongAnsweredCapitals) {
                                    wrongAnweredCapitals.clear()
                                    wrongAnweredCapitals.addAll(ctx.wrongCards)
                                }
                            }
                        }
                )
            }
            (startPhrases + repeatingPhrases)
        }
    }
  learner_created: false
- name: test/FlashcardsTest.java
  visible: false
  text: |
    import common.FlashcardsStage7Test;

    public class FlashcardsTest extends FlashcardsStage7Test {
        // just empty class, but not abstract so it can be run
    }
  learner_created: false
- name: src/flashcards/Main.java
  visible: true
  text: |-
    package flashcards;

    import java.util.Scanner;
    import java.util.List;
    import java.util.ArrayList;
    import java.util.Map;
    import java.util.Map.Entry;
    import java.util.Set;
    import java.util.LinkedHashMap;
    import java.util.Collections;
    import java.util.Iterator;
    import java.io.*;

    public class Main {

        private static Map<Card, Integer> cardsWithMistakes = new LinkedHashMap<>();
        private static Scanner scanner = new Scanner(System.in);
        private static List<String> logger = new ArrayList<>();
        private static String importFileName;
        private static String exportFileName;

        public static void main(String[] args) {

            if(args.length > 0) {
                if ()
            }

            final String mainMenuMessage = "Input the action (add, remove, import, export, ask, exit, log, hardest card, reset stats) :";
            String action = "add";

            while(!action.equals("exit")){
                printAndLogMessage(mainMenuMessage);
                action = scanner.nextLine();
                logMessage(action);
                switch(action) {
                    case "add" :
                        getNewCardDataAndAdd();
                        break;
                    case "remove" :
                        getOldCardDataAndRemove();
                        break;
                    case "import" :
                        getFileNameAndImportCards();
                        break;
                    case "export" :
                        getFileNameAndExportCards();
                        break;
                    case "ask" :
                        int timesToAsk = getQuestionAmount();
                        askQuestions(timesToAsk);
                        break;
                    case "exit" :
                        printAndLogMessage("Bye, bye!");
                        break;
                    case "log" :
                        saveLog();
                        break;
                    case "hardest card" :
                        printHardestCards();
                        break;
                    case "reset stats":
                        resetStats();
                        break;
                }
            }
        }


        private static void printAndLogMessage(final String message) {
            System.out.println(message);
            logger.add(message);
        }

        private static void logMessage(final String message) {
            logger.add(message);
        }

        private static void getNewCardDataAndAdd() {
            try {
                Card card = getNewCardData();
                addCard(card);
            } catch (IllegalArgumentException e) {
                printAndLogMessage(e.getMessage());
            }
        }

        private static Card getNewCardData() throws IllegalArgumentException {
            printAndLogMessage("The card:");
            String term = scanner.nextLine();
            logMessage(term);

            for(Card card : cardsWithMistakes.keySet()) {
                if (card.getTerm().equals(term)){
                    throw new IllegalArgumentException("The card \"" + term + "\" already exists.");
                }
            }

            System.out.println("The definition of the card:");
            logger.add("The definition of the card:");
            String definition = scanner.nextLine();
            logger.add(definition);
            /*if (cards.containsValue(definition))
                throw new IllegalArgumentException("The definition \"" + definition + "\" already exists. Try again:");*/

            for(Card card : cardsWithMistakes.keySet()) {
                if (card.getDefinition().equals(definition)){
                    throw new IllegalArgumentException("The definition \"" + definition + "\" already exists. Try again:");
                }
            }

            return new Card(term, definition);
        }

        private static void addCard(Card card)  {
            cardsWithMistakes.put(new Card(card.getTerm(), card.getDefinition()), 0);
            printAndLogMessage("The pair (\"" + card.getTerm() + "\":\"" + card.getDefinition() + "\") has been added");
        }

        private static void getOldCardDataAndRemove() {
            try {
                Card card = getOldCardData();
                removeCard(card);
            } catch (IllegalArgumentException e) {
                printAndLogMessage(e.getMessage());
            }
        }

        private static Card getOldCardData() throws IllegalArgumentException {
            printAndLogMessage("The card:");
            String term = scanner.nextLine();
            logMessage(term);

            for(Card card : cardsWithMistakes.keySet()) {
                if(card.getTerm().equals(term)) {
                    return card;
                }
            }
            throw new IllegalArgumentException("Can't remove \"" + term + "\": there is no such card.");
        }

        private static void removeCard(Card card) {
            Iterator<Entry<Card, Integer>> iter = cardsWithMistakes.entrySet().iterator();
            while (iter.hasNext()) {
                Entry<Card, Integer> entryToRemove = iter.next();
                if (entryToRemove.getKey().getTerm().equals(card.getTerm())) {
                    iter.remove();
                }
            }
            printAndLogMessage("The card has been removed.");
        }

        private static void getFileNameAndImportCards() {
            String fileNameImport = getFileName();
            int counterImport = importCards(fileNameImport);
            if(counterImport == 0){
                printAndLogMessage("File \"" + fileNameImport + "\" not found");
            } else{
                printAndLogMessage(counterImport + " cards have been loaded.");
            }
        }

        private static int importCards(String fileName) {
            int counter = 0;
            try(Scanner fileScanner = new Scanner(new File(fileName))) {

                while(fileScanner.hasNext()) {
                    String term = fileScanner.nextLine();
                    String definition = fileScanner.nextLine();
                    int errors = Integer.parseInt(fileScanner.nextLine());
                    cardsWithMistakes.put(new Card(term, definition), errors);
                    counter++;
                }
            } catch (FileNotFoundException e) {

            }
            return counter;
        }

        private static void getFileNameAndExportCards() {
            String fileName = getFileName();
            int counterExport = exportCards(fileName);
            printAndLogMessage(counterExport + " cards have been saved.");
        }

        private static String getFileName() {
            printAndLogMessage("File name:");
            String fileName = scanner.nextLine();
            logMessage(fileName);
            return fileName;
        }

        private static int exportCards(String fileName) {
            int counter = 0;
            try(PrintWriter printWriter = new PrintWriter(new File(fileName))) {
                /*for(String term : cards.keySet()) {
                    printWriter.println(term);
                    printWriter.println(cards.get(term));
                    counter++;
                }*/

                for(Entry<Card, Integer> entry : cardsWithMistakes.entrySet()) {
                    printWriter.println(entry.getKey().getTerm());
                    printWriter.println(entry.getKey().getDefinition());
                    printWriter.println(entry.getValue());
                    counter++;
                }
            } catch (FileNotFoundException e) {

            }
            return counter;
        }

        private static int getQuestionAmount() {
            printAndLogMessage("How many times to ask?");
            int amount = Integer.parseInt(scanner.nextLine());
            logMessage(Integer.toString(amount));
            return amount;
        }

        private static void askQuestions(int amount) {
            while(amount>0) {
                for(Entry<Card, Integer> entry : cardsWithMistakes.entrySet()) {
                    printAndLogMessage("Print the definition of \"" + entry.getKey().getTerm() + "\":");
                    String answer = scanner.nextLine();
                    logMessage(answer);
                    if (answer.equals(entry.getKey().getDefinition())) {
                        printAndLogMessage("Correct answer.");
                    } else {
                        boolean definitionFound = false;
                        for (Entry<Card, Integer> wrongEntry : cardsWithMistakes.entrySet()) {
                            if (!wrongEntry.getKey().getTerm().equals(entry.getKey().getTerm()) && wrongEntry.getKey().getDefinition().equals(entry.getKey().getDefinition())) {
                                printAndLogMessage("Wrong answer. (The correct one is \"" + entry.getKey().getDefinition() + "\", you've just written the definition of \"" + wrongEntry.getKey().getTerm() + "\" card.)");
                                definitionFound = true;
                            }
                        }

                        if (!definitionFound) {
                            printAndLogMessage("Wrong answer. The correct one is \"" + entry.getKey().getDefinition() + "\"");
                        }

                        int currentMistakes = entry.getValue();
                        entry.setValue(currentMistakes+1);
                    }
                    if (--amount == 0)
                        break;
                }
            }
        }

        private static void saveLog() {
            String fileName = getFileName();
            try(PrintWriter printWriter = new PrintWriter(new File(fileName))) {
                for(String line : logger) {
                    printWriter.println(line);
                }
                printAndLogMessage("The log has been saved;");
            } catch (FileNotFoundException e) {

            }
        }

        private static void printHardestCards() {
            if (cardsWithMistakes.size() != 0) {
                int maximum = Collections.max(cardsWithMistakes.values());
                List<String> hardestTerms = new ArrayList<>();
                if (maximum != 0) {
                    for(Entry<Card, Integer> entry : cardsWithMistakes.entrySet()) {
                        if (entry.getValue() == maximum) {
                            hardestTerms.add("\"" + entry.getKey().getTerm() + "\"");
                        }
                    }
                    if(hardestTerms.size() == 1){
                        printAndLogMessage("The hardest card is " + hardestTerms.get(0) + ". You have " + maximum + " errors answering them.");
                    } else {
                        String names = String.join(", ", hardestTerms);
                        printAndLogMessage("The hardest cards are " + names + ". You have " + maximum + " errors answering them.");
                    }

                } else {
                    printAndLogMessage("There are no cards with errors.");
                }
            } else {
                printAndLogMessage("There are no cards with errors.");
            }



        }

        private static void resetStats() {
            for(Entry<Card, Integer> entry : cardsWithMistakes.entrySet()) {
                entry.setValue(0);
            }
            printAndLogMessage("Card statistics has been reset.");
        }
    }

    class Card{
        private String term;
        private String definition;

        public Card(String term, String definition){
            this.term = term;
            this.definition = definition;
        }

        public String getTerm(){
            return term;
        }

        public String getDefinition(){
            return definition;
        }
    }
  learner_created: true
- name: capitals.txt
  visible: true
  text: |
    France
    Paris
    5
    Russia
    Moscow
    5
  learner_created: true
- name: capitalsNew.txt
  visible: true
  text: |
    France
    Paris
  learner_created: true
feedback_link: https://hyperskill.org/projects/44/stages/238/implement
status: Solved
record: -1
